P  -> PRINCIPAL FUNCIONES SECCION_VARIABLES
PRINCIPAL  -> { <main> } BLOQUE
BLOQUE -> { ESTATUTOS }
FUNCIONES  -> def identificador ( : PARAMETROS : ) BLOQUE RETURN FUNCIONES_PRIMA
FUNCIONES_PRIMA -> FUNCIONES
FUNCIONES_PRIMA -> ''
PARAMETROS -> TIPO identificador PARAMETROS_PRIMA
PARAMETROS -> ''
PARAMETROS_PRIMA  -> , PARAMETROS
PARAMETROS_PRIMA  -> ''
RETURN -> return LISTA_VARIABLES
RETURN-> ''
TIPO  -> numerical
TIPO  -> dec
TIPO  -> string
TIPO  -> logic
TIPO  -> list
SECCION_VARIABLES -> { : vars : DECLARACION_VARIABLES }
DECLARACION_VARIABLES -> LISTA_VARIABLES : TIPO DECLARACION_VARIABLES_PRIMA
DECLARACION_VARIABLES_PRIMA -> DECLARACION_VARIABLES
DECLARACION_VARIABLES_PRIMA -> ''
LISTA_VARIABLES -> identificador LISTA_VARIABLES_PRIMA
LISTA_VARIABLES_PRIMA -> , LISTA_VARIABLES
LISTA_VARIABLES_PRIMA -> ''
ESTATUTOS  -> ESTATUTO ESTATUTOS
ESTATUTOS  -> ''
ESTATUTO -> ESTATUTO_CYCLEWHILE
ESTATUTO -> ESTATUTO_CYCLEFOR
ESTATUTO -> ESTATUTO_CYCLEREPEAT
ESTATUTO -> ASIGNACION
ESTATUTO -> ESTATUTO_CYCLEDO
ESTATUTO -> FUNCION_BUILT_IN
ESTATUTO -> ESTATUTO_IF
ASIGNACION -> identificador ASIGNACION_PRIMA
ASIGNACION_PRIMA  -> :=:: EXP
ASIGNACION_PRIMA  -> <- [[ LISTA_ELEMENTO ]]
FUNCION_BUILT_IN  -> longitud ( identificador )
FUNCION_BUILT_IN  -> esnumero ( identificador )
FUNCION_BUILT_IN  -> esdecimal ( identificador )
FUNCION_BUILT_IN  -> entero ( identificador )
FUNCION_BUILT_IN  -> decimal ( identificador )
FUNCION_BUILT_IN  -> lectura ( )
FUNCION_BUILT_IN  -> absoluto ( EXP )
FUNCION_BUILT_IN  -> cadena ( EXP )
FUNCION_BUILT_IN  -> potencia ( EXP )
FUNCION_BUILT_IN  -> redondear ( EXP )
FUNCION_BUILT_IN  -> sumando ( identificador )
FUNCION_BUILT_IN  -> minimo ( identificador )
FUNCION_BUILT_IN  -> maximo ( identificador )
FUNCION_BUILT_IN  -> imprimir ( IMPRESION )
LISTA_ELEMENTO -> numero LISTA_ELEMENTO_PRIMA
LISTA_ELEMENTO_PRIMA  -> , LISTA_ELEMENTO
LISTA_ELEMENTO_PRIMA  -> ''
IMPRESION  -> numero IMPRESION_PRIMA
IMPRESION  -> texto IMPRESION_PRIMA
IMPRESION_PRIMA -> , IMPRESION
IMPRESION_PRIMA -> ''
ESTATUTO_IF -> ifwhether CONDICION BLOQUE ELIF
CONDICION  -> in RANGE
CONDICION  -> EXPB
CONDICION  -> true
ESTATUTO_CYCLEWHILE -> when CONDICION BLOQUE
ESTATUTO_CYCLEFOR -> since FOR_PRIMA
FOR_PRIMA  -> identificador in RANGE BLOQUE
FOR_PRIMA  -> ( identificador = EXP , EXPB , INCREMENTO ) BLOQUE
INCREMENTO -> identificador ++
ESTATUTO_CYCLEREPEAT  -> repeat BLOQUE CONDICION
ESTATUTO_CYCLEDO  -> do BLOQUE CONDICION
ELIF  -> elif EXPB BLOQUE ELIF
ELIF  -> else BLOQUE
ELIF  -> ''
RANGE -> range ( START , STOP , STEP )
START -> numero
START -> ''
STOP  -> numero
STEP  -> numero
STEP  -> ''
EXPB  -> TERMB EXPB_PRIMA
EXPB_PRIMA -> && TERMB EXPB_PRIMA
EXPB_PRIMA -> || TERMB EXPB_PRIMA
EXPB_PRIMA -> ''
TERMB -> EXP TERMB_PRIMA
TERMB_PRIMA-> OPER EXP TERMB_PRIMA
TERMB_PRIMA -> ''
EXP -> TERM EXP_PRIMA
EXP_PRIMA  -> + TERM EXP_PRIMA
EXP_PRIMA  -> - TERM EXP_PRIMA
EXP_PRIMA  -> ''
TERM  -> FACTOR TERM_PRIMA
TERM_PRIMA -> * FACTOR TERM_PRIMA
TERM_PRIMA -> / FACTOR TERM_PRIMA
TERM_PRIMA -> ''
FACTOR -> identificador FUNCT
FACTOR -> ( EXPB )
FUNCT -> ( PARAMETROS )
FUNCT -> ''
OPER  -> >!!>
OPER  -> <!!<
OPER  -> >>!!=
OPER  -> <<!!=
OPER  -> =!!=